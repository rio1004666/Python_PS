# 지하철
# 노선 여러개 존재
# 지하철 지도가 주어짐
# 정류장 N개 노선 M개
# 숫자가 정류장들 , 같은 표현 - 혹은 ... 혹은 ~~~ 가 묶어놓은 정류장들을 노선
# 시작역에서 도착역까지 환승을 최소로 하고 도착하는 환승횟수를 구하자
# 1번타서 2번에서 노선이 바뀔수 있으므로 6번으로 가면 환승 한번
# 6번에서 7번으로 갔을 경우 또 환승 할 수 있으므로 환승 한번 후 10번으로 이동
# 예를들어 시작점이 7번이고 도착역이 5번이면 환승을 한번도 하지 않고 도착할 수 있으므로 0개
# 정류장 N <= 10000   노선 <= 1000개
# 각 노선에는 정류장이 최대 1000개 존재
# 못가면 -1 리턴이고
# 역들사이는 일렬로 양방향으로 다 연결되어 있다
# 문제를 봣을 때 찾을 수 있는 키워드는 주어진 문제가 강하게 그래프의 냄새가 풍겨짐
# 최소 라는 키워드와 환승이라는 키워드가 있다
# 최소 + 그래프는 최단거리알고리즘인데 여기서는 거리를 구하는 것이 아니라
# 환승 횟수를 구함
# 환승을 한번 하는 행위가 거리로 연결되는 그래프를 새롭게 만들면 쉽게 해결할 수 있다
# 그래프를 새롭게 만든다
# 환승 한번 하는행위가 1이라는 거리가 되게함 환승안하면 거리는 0
# 현재 정점은 0 이고 간선이 노선이지만,
# 새롭게 만들 그래프는 간선하나가 환승 한번의 의미를 같게하고 싶어서
# 정점을 노선으로 만들것임 즉 노선을 정점으로 만들어서
# 간선을 한정점에서 다른 정점으로 갈 수 있는 행위가 간선이 된다
# 두 노선 사이에 환승이 가능하다면 간선을 넣어준다
# 1번역에서 11번 역까지 가고 싶다면
# 1번역이 속한 노선은 A 11번이 속한 노선은 C이다
# A노선에서 C노선으로 간다는 것이 가능하니까
# A노선에서 C노선까지의 최단거리를 계산해주면 최소 환승 횟수가 된다
# 최소 환승 키워드에서 최소라는 것을 최단거리 알고리즘 떠올리고
# 환승을 새로운 그래프로 풀면 최단거리 알고리즘을 사용한다
# 거리 는 사용간선횟수최소를 구함
# 환승을 한다는 자체가 노선을 변경하는 행위가 곧 환승
# 노선 변경을 최소로 한다는 것과 같다
# 정점이 노선
# 간선은 노선간의 환승이 가능할때 추가해줌
# A에서 C까지 간선을 두번썻다는 것은 환승을 2번했다는 것과 같음
# 그래프를 잘 만들고 그 그래프 상에서 시작역을 포함한 노선을 시작으로 BFS를 하면됨
# 그런데 여기서 중요한건 도착역이 여러 노선에서 도착하는 것이라면
# 그 여러 노선에서 오는 최소 환승횟수들의 최소를 또 구해야한다
# BFS시작시에는 그 역이 포함된 모든 노선을 시작 정점으로 잡아주어야 한다
# 각 노선마다 최소환승 횟수는 다를 것이므로
# 그리고 각 노선의 모든 역들을 체크해보면서 그 역이 속한 노선이 있는지 확인하면
# 환승 할 수 있다고 판단하고 그 노선을 큐에 넣으면서 +1 간선길이를 추가한다
# 그래서 애초에 node 즉 역이속한 노선들을 전부 저장해야하고
# line에 속한 역들을 가지고 있어야 한다
# 여기서 주의할것은 visit 역 visit 노선 을 만들어서 방문체크를 해주는 것이 좋다
# 같은 역에 대해서 환승을 엄청 많이 시도하게 되버린다.
# 처음으로 한번 역에 도착했으면 그다음 같은 역은 더이상 환승시도를 하지 않을 것임
